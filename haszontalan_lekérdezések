Igen, az ER-diagramban a nyíl mindig a "több" irányába mutat, vagyis a "1" entitásból a "N" entitásba mutat a kapcsolat.


Az adatbázisod kapcsolatai így néznek ki:

users → (jogosultság azonosító)
dolgozos → iskola (iskola_azon)
dolgozos → gyakorlatihely (gyakhely_azon)
kikuldotts → dolgozos (dolgozo_azon)
Tehát a kapcsolatok így néznek ki:


users (jogosultsag_azon)  
dolgozos -> iskola (iskola_azon)  
dolgozos -> gyakorlatihely (gyakhely_azon)  
kikuldotts -> dolgozos (dolgozo_azon)  
Ez azt jelenti, hogy:

Egy diák egy iskolához tartozik.
Egy diák egy gyakorlati helyhez tartozhat.
Minden kiküldött PDF egy adott diákhoz kapcsolódik.





-------------------------------------------------------------------------------------------------------------------------------------------
Igen, pontosan, az ER-diagram és az adatbázis séma jelölése között van egy fontos különbség, amit most pontosan tisztázok:

ER-diagramokban:
Az ER-diagram (Entitás–Kapcsolat diagram) célja, hogy szemléltetni tudja a táblák közötti logikai kapcsolatokat. Az "1:N" kapcsolatot általában a "több" felé mutató nyilakkal ábrázolják.


Adatbázis séma:
Az adatbázis séma (a táblák és mezők definíciója) azt jelenti, hogy hogyan valósul meg a kapcsolat az adatbázisban. Itt az idegen kulcsok mutatnak egy másik táblára.

Tehát az adatbázisban a táblák kapcsolata a külső kulcsok által van meghatározva. Az idegen kulcs a "több" oldalról mutat a "kevesebb" oldalra.
-------------------------------------------------------------------------------------------------------------------------------------------
















1. Kik azok a diákok, akik még nem kaptak PDF-et ebben a hónapban?
SELECT d.nev, d.email
FROM dolgozos d
LEFT JOIN kikuldotts k ON d.d_azon = k.dolgozo_azon
WHERE k.kuldes_datuma IS NULL OR MONTH(k.kuldes_datuma) <> MONTH(GETDATE());



2. Melyik diák kapott legutoljára pénzügyi dokumentumot?
SELECT TOP 1 d.nev, d.email, k.pdf_fajl_neve, k.kuldes_datuma
FROM dolgozos d
JOIN kikuldotts k ON d.d_azon = k.dolgozo_azon
ORDER BY k.kuldes_datuma DESC;


3. Volt-e olyan hónap, amikor valaki kimaradt a kiküldésből?
SELECT DISTINCT MONTH(k.kuldes_datuma)
FROM kikuldotts k
RIGHT JOIN dolgozos d ON d.d_azon = k.dolgozo_azon
WHERE k.kuldes_datuma IS NULL;


4. Hány PDF-et küldtél ki az elmúlt egy évben, havi bontásban?
SELECT YEAR(k.kuldes_datuma) AS ev, MONTH(k.kuldes_datuma) AS honap, COUNT(k.kikuldott_azon) AS pdf_dbszam
FROM kikuldotts k
WHERE k.kuldes_datuma >= GETDATE() - 365
GROUP BY YEAR(k.kuldes_datuma), MONTH(k.kuldes_datuma)
ORDER BY ev DESC, honap DESC;


5. Kik azok a diákok, akiknek még SOHA nem küldtél PDF-et?
SELECT d.nev, d.email
FROM dolgozos d
LEFT JOIN kikuldotts k ON d.d_azon = k.dolgozo_azon
WHERE k.dolgozo_azon IS NULL;















CREATE DATABASE IF NOT EXISTS szakdoga;
USE szakdoga;
GO

-- 2. Táblák létrehozása a megfelelő sorrendben

-- iskola tábla létrehozása
CREATE TABLE iskola (
    isk_azon bigint IDENTITY(1,1) PRIMARY KEY,
    nev nvarchar(255) NOT NULL,
    web_oldal nvarchar(255),
    kapcsolat_tarto nvarchar(255) NOT NULL,
    created_at datetime,
    updated_at datetime
);
GO

-- gyakorlatihely tábla létrehozása
CREATE TABLE gyakorlatihely (
    gyak_azon bigint IDENTITY(1,1) PRIMARY KEY,
    ceg_nev nvarchar(255) NOT NULL,
    web_oldal nvarchar(255),
    kapcsolat_tarto nvarchar(255) NOT NULL,
    telefonszam nvarchar(255) NOT NULL,
    created_at datetime,
    updated_at datetime
);
GO

-- dolgozos tábla létrehozása
ALTER TABLE dolgozos (
    d_azon bigint IDENTITY(1,1) PRIMARY KEY,
    nev nvarchar(255) NOT NULL,
    email nvarchar(255) NOT NULL,
    szul_nev nvarchar(255),
    születesi_hely nvarchar(255),
    születesi_ido date,
    anyaja_neve nvarchar(255),
    taj_szam nvarchar(255),
    ado_szam nvarchar(255),
    gondviselo_nev nvarchar(255),
    telefonszam nvarchar(255),
    iskola_azon bigint,
    gyakhely_azon bigint,
    megjegyzes varchar(max),
    created_at datetime,
    updated_at datetime
);
GO


-- Kiküldött PDF-ek tábla
CREATE TABLE kikuldotts (
    kikuldott_azon bigint IDENTITY(1,1) PRIMARY KEY,
    dolgozo_azon bigint NOT NULL,
    pdf_fajl_neve varchar(255) NOT NULL,
    kuldes_datuma DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (dolgozo_azon) REFERENCES dolgozos(d_azon)
);
GO








-- 3. Idegen kulcsok hozzáadása a dolgozos táblához

-- iskola_azon idegen kulcs hozzáadása
ALTER TABLE dolgozos
ADD CONSTRAINT fk_dolgozos_iskola
FOREIGN KEY (iskola_azon) REFERENCES iskola(isk_azon)
ON DELETE SET NULL;
GO

-- gyakhely_azon idegen kulcs hozzáadása
ALTER TABLE dolgozos
ADD CONSTRAINT fk_dolgozos_gyakhely
FOREIGN KEY (gyakhely_azon) REFERENCES gyakorlatihely(gyak_azon)
ON DELETE SET NULL;
GO

-- 1. Dolgozók listája iskolánként
CREATE VIEW DolgozokIskolankent AS
SELECT i.nev AS iskola_nev, d.nev AS dolgozo_nev, d.email
FROM dolgozos d
INNER JOIN iskola i ON d.iskola_azon = i.isk_azon;


--2. Dolgozók száma gyakorlati helyenként 

CREATE VIEW DolgozokSzamaGyakorlatiHelyenkent AS
SELECT g.ceg_nev AS gyakorlati_hely, COUNT(d.d_azon) AS dolgozok_szama
FROM dolgozos d
INNER JOIN gyakorlatihely g ON d.gyakhely_azon = g.gyak_azon
GROUP BY g.ceg_nev;

-- 3. Dolgozók, akiknek nincs megadva gyakorlati hely 
CREATE VIEW DolgozokGyakorlatiHelyNelkul AS
SELECT d.nev, d.email
FROM dolgozos d
WHERE d.gyakhely_azon IS NULL;


-- 4. Gyakorlati helyek, ahol több mint 5 dolgozó van
CREATE VIEW GyakorlatiHelyekTobbMint5Dolgozoval AS
SELECT g.ceg_nev AS gyakorlati_hely, COUNT(d.d_azon) AS dolgozok_szama
FROM dolgozos d
INNER JOIN gyakorlatihely g ON d.gyakhely_azon = g.gyak_azon
GROUP BY g.ceg_nev
HAVING COUNT(d.d_azon) > 5;

-- 5. Gyakorlati helyek, ahol nincs egyetlen dolgozó sem 

-- ITT MUSZÁJ LEFT JOINT HASZNÁLNI, MIVEL OLYAN REKORDOT ADD VISSZA AHOL NINCS EGGYEZÉS 
CREATE VIEW GyakorlatiHelyekDolgozokNelkul AS
SELECT g.ceg_nev AS gyakorlati_hely
FROM gyakorlatihely g
LEFT JOIN dolgozos d ON g.gyak_azon = d.gyakhely_azon
WHERE d.d_azon IS NULL;

